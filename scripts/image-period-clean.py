# SPDX-FileCopyrightText: 2024 Alexandru Fikl <alexfikl@gmail.com>
# SPDX-License-Identifier: MIT

from __future__ import annotations

import logging
import pathlib

import numpy as np
import rich.logging

log = logging.getLogger(pathlib.Path(__file__).stem)
log.setLevel(logging.ERROR)
log.addHandler(rich.logging.RichHandler())

SCRIPT_PATH = pathlib.Path(__file__)
SCRIPT_LONG_HELP = f"""\
This script performs some post processing to clean up images generated by

    > netbrot --render attractive

that finds fixed points using a random Newton method. This results in some grainy
looking pictures that should be cleaned up.

Example:

    > {SCRIPT_PATH.name} --extent -1 1 -1 1 --outfile edges.png images/*.png
"""


def main(
    filename: pathlib.Path,
    outfile: pathlib.Path | None,
    *,
    overwrite: bool = False,
) -> int:
    try:
        import cv2
    except ImportError:
        log.error("'cv2' package not found.")
        return 1

    if not filename.exists():
        log.error("File does not exist: '%s'.", filename)
        return 1

    if outfile is None:
        outfile = filename.with_stem(f"{filename.stem}-filtered")

    if not overwrite and outfile is not None and outfile.exists():
        log.error("Output file exists (use --overwrite): '%s'.", outfile)
        return 1

    img = cv2.imread(filename)

    # NOTE:
    #   medianBlur: seems to remove most small noise parts
    #   morphologyEx: seems to remove bigger chunks in some places
    #   repeat: applying more than 2-3 times seems to do nothing
    kernel = np.ones((3, 3), dtype=np.uint8)
    for _ in range(5):
        img = cv2.medianBlur(img, 3)
        img = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

    cv2.imwrite(outfile, img)

    return 0


if __name__ == "__main__":
    import argparse

    class HelpFormatter(
        argparse.ArgumentDefaultsHelpFormatter,
        argparse.RawDescriptionHelpFormatter,
    ):
        pass

    parser = argparse.ArgumentParser(
        formatter_class=HelpFormatter,
        description=SCRIPT_LONG_HELP,
    )
    parser.add_argument("filename", type=pathlib.Path)
    parser.add_argument("-o", "--outfile", type=pathlib.Path, default=None)
    parser.add_argument(
        "--overwrite",
        action="store_true",
        help="Overwrite existing files",
    )
    parser.add_argument(
        "-q",
        "--quiet",
        action="store_true",
        help="Only show error messages",
    )
    args = parser.parse_args()

    if not args.quiet:
        log.setLevel(logging.INFO)

    raise SystemExit(
        main(
            args.filename,
            args.outfile,
            overwrite=args.overwrite,
        )
    )
